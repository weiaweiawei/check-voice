import{l as t,M as e}from"./logging-D82xXc4X.js";class i{options;inputBuffer;inputBufferIndex;constructor(e){this.options=e,e.nativeSampleRate<16e3&&t.error("nativeSampleRate is too low. Should have 16000 <= nativeSampleRate"),this.inputBuffer=new Float32Array(0),this.inputBufferIndex=0}process=t=>{const e=[];for(this.fillInputBuffer(t);this.hasEnoughDataForFrame();){const t=this.generateOutputFrame();e.push(t)}return e};stream=async function*(t){for(this.fillInputBuffer(t);this.hasEnoughDataForFrame();){const t=this.generateOutputFrame();yield t}};fillInputBuffer(t){const e=new Float32Array(this.inputBuffer.length+t.length);e.set(this.inputBuffer,0),e.set(t,this.inputBuffer.length),this.inputBuffer=e}hasEnoughDataForFrame(){return this.inputBuffer.length-this.inputBufferIndex>=this.options.targetFrameSize*this.options.nativeSampleRate/this.options.targetSampleRate}generateOutputFrame(){const t=new Float32Array(this.options.targetFrameSize),e=this.options.nativeSampleRate/this.options.targetSampleRate;let i=0,s=this.inputBufferIndex;for(i=0;i<this.options.targetFrameSize;i++){const r=s,n=Math.min(s+e,this.inputBuffer.length);let o=0,a=0;for(let t=r;t<n;t++)o+=this.inputBuffer[t],a++;t[i]=o/a,s+=e}return this.inputBufferIndex=Math.floor(s),t}}class s extends AudioWorkletProcessor{resampler;_initialized=!1;_stopProcessing=!1;options;port;constructor(t){super(),this.options=t.processorOptions,this.port.onmessage=t=>{t.data.message===e.SpeechStop&&(this._stopProcessing=!0)},this.init()}init=async()=>{t.debug("initializing worklet"),this.resampler=new i({nativeSampleRate:16e3,targetSampleRate:16e3,targetFrameSize:this.options.frameSamples}),this._initialized=!0,t.debug("initialized worklet")};process(t,i,s){if(this._stopProcessing)return!1;const r=t[0][0];if(this._initialized&&r instanceof Float32Array){const t=this.resampler.process(r);for(const i of t)this.port.postMessage({message:e.AudioFrame,data:i.buffer},[i.buffer])}return!0}}registerProcessor("vad-worklet",s);
//# sourceMappingURL=worklet.js.map
